#!/usr/bin/env ruby
require "optparse"
require "visualtag"

options = {	:pattern_dimension => 1800,
			:filename => 'tag.svg',
			:pattern => [[1,0,1,0,1,0],[0,1,0,1,0,1]]*3,
			:verbose => false}

ARGV.options do |opts|
	opts.banner = "Usage:  #{File.basename($PROGRAM_NAME)} [OPTIONS]"
	
	opts.separator ""
	opts.separator "Specific Options:"
	
	opts.on( "-c C", "--cell-dimension", Integer,
	         "Dimension of each cell of the pattern, in pixels." ) do |opt|
		options[:pattern_dimension] = opt*6
	end

	opts.on( "-f F", "--filename", String,
	         "Filename for the created tag." ) do |opt|
		options[:filename] = opt
	end

	opts.on( "-p P", "--pattern", String,
	         "The pattern of the tag, matlab (mat2str surrounded with \") or ruby (to_s) representations are allowed" ) do |opt|
		options[:pattern] = opt
	end
	
	opts.on( "-v", "--verbose",
	         "Print some text while executing." ) do |opt|
		options[:verbose] = opt
	end

	opts.separator "Common Options:"
	
	opts.on( "-h", "--help",
	         "Show this message." ) do
		puts opts
		exit
	end
	
	begin
		opts.parse!
	rescue
		puts opts
		exit
	end
end

pattern = []
if options[:pattern].class.name == 'Array'
	pattern = options[:pattern]
	if options[:verbose]
		puts 'Using default pattern'
	end
else
	begin
		pattern = eval(options[:pattern])
		if (pattern.class.name == 'Array' && options[:verbose])
			puts 'Found a ruby matrix'
		end
	rescue Exception => exc
		begin
			pattern = []
			options[:pattern].each_line(';') do |row|
				rubyrow = []
				row.scan(/false|true|1|0/) do |match|
					value = eval(match)
					rubyrow << (value.class.name == 'Fixnum'? value > 0: value)
				end
				pattern << rubyrow.map { |e| e ? 1 : 0 }
			end
			if options[:verbose]
				puts 'Found a matlab matrix'
			end
		rescue
			puts 'Error: Pattern format unknown'
			Process.exit
		end
	end
end

if pattern.class.name == 'Array'
	if options[:verbose]
		puts 'Used pattern:'
		puts pattern.inspect
	end
else
	puts 'Error: wrong pattern format. It must be an array'
	Process.exit
end

begin
	Visualtag::create(pattern, options[:filename], options[:pattern_dimension], Float(options[:pattern_dimension])/2.0)
	if options[:verbose]
		puts "Created file #{options[:filename]}"
	end
rescue
	if options[:verbose]
		puts "Error in generating the tag file"
		Process.exit
	end
end
